package aais;

import java.sql.*;
import java.util.*;

public class DatabaseConnect {
	private Connection conn = null;
	private Statement stmt = null;

	private static final String USERNAME = "s15010938";
	private static final String PASSWORD = "kss1218";
	private static final String URL = "jdbc:oracle:thin:@localhost:5902:ORCL";

	public DatabaseConnect() {
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			conn = DriverManager.getConnection(URL,USERNAME,PASSWORD);
			System.out.println("DB Connection OK!");
		}catch(ClassNotFoundException e) {
			e.printStackTrace();
			System.out.println("DB Driver Error!");
		}catch(SQLException se) {
			se.printStackTrace();
			System.out.println("DB Connection Error!");
			
		}
		
	}
	
	public ArrayList<StudentVO> selectStudent(String condition) {
		String sql = "select * from Customer ";
		sql+=condition;
		PreparedStatement pstmt = null;
		ArrayList<StudentVO> arrStudentVO = new ArrayList<StudentVO>();
		
		try {
			pstmt = conn.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			
			while(rs.next()) {
				StudentVO tempStudentVO = new StudentVO(
						 rs.getString("cusID"),
					   	 rs.getString("chargeProfNum"),
						 rs.getString("stuAffDepNum"),
						 rs.getString("stuName"),
						 rs.getString("stuSSNum"),
						 rs.getString("stuAddress"),
						 rs.getInt("stuPhoneNum"),
						 rs.getString("stuEmail"),
						 rs.getInt("curGrade"),
						 rs.getInt("curSem"));
				arrStudentVO.add(tempStudentVO);
			}
			
		} catch(SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null && !pstmt.isClosed())
					pstmt.close();
			}catch(SQLException e) {
				e.printStackTrace();
			}
		}
		
		return arrStudentVO;
	}
	
	public ArrayList<ProfessorVO> selectProfessor(String condition) {
		String sql = "select * from Customer ";
		sql+=condition;
		PreparedStatement pstmt = null;
		ArrayList<ProfessorVO> arrProfessorVO = new ArrayList<ProfessorVO>();
		
		try {
			pstmt = conn.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			
			while(rs.next()) {
				ProfessorVO tempProfessorVO = new ProfessorVO(
						 rs.getString("profNum"),
						 rs.getString("profAffDepNum"),
						 rs.getString("profName"),
						 rs.getString("profSSNum"),
						 rs.getString("profAddress"),
						 rs.getInt("profPhoneNum"),
						 rs.getString("prifEmail"));
				arrProfessorVO.add(tempProfessorVO);
			}
			
		} catch(SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null && !pstmt.isClosed())
					pstmt.close();
			}catch(SQLException e) {
				e.printStackTrace();
			}
		}
		
		return arrProfessorVO;
	}
	
	public ArrayList<CourseVO> selectCourse(String condition) {
		String sql = "select * from Customer ";
		sql+=condition;
		PreparedStatement pstmt = null;
		ArrayList<CourseVO> arrCourseVO = new ArrayList<CourseVO>();
		
		try {
			pstmt = conn.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			
			while(rs.next()) {
				CourseVO tempCourseVO = new CourseVO(
						 rs.getString("courseNum"),
						 rs.getString("chargeProfNum"),
						 rs.getString("progressDepNum"),
						 rs.getString("courseName"),
						 rs.getFloat("recievedCredits"),
						 rs.getInt("courseTime"),
						 rs.getString("LecRoom"));
				arrCourseVO.add(tempCourseVO);
			}
			
		} catch(SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null && !pstmt.isClosed())
					pstmt.close();
			}catch(SQLException e) {
				e.printStackTrace();
			}
		}
		
		return arrCourseVO;
	}
	
	public ArrayList<DepartmentVO> selectDepartment(String condition) {
		String sql = "select * from Customer ";
		sql+=condition;
		PreparedStatement pstmt = null;
		ArrayList<DepartmentVO> arrDepartmentVO = new ArrayList<DepartmentVO>();
		
		try {
			pstmt = conn.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			
			while(rs.next()) {
				DepartmentVO tempDepartmentVO = new DepartmentVO(
						 rs.getString("depNum"),
						 rs.getString("depName"),
						 rs.getInt("depPhoneNum"));
				arrDepartmentVO.add(tempDepartmentVO);
			}
			
		} catch(SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null && !pstmt.isClosed())
					pstmt.close();
			}catch(SQLException e) {
				e.printStackTrace();
			}
		}
		
		return arrDepartmentVO;
	}
	
	public ArrayList<AttendVO> selectAttend(String condition) {
		String sql = "select * from Customer ";
		sql+=condition;
		PreparedStatement pstmt = null;
		ArrayList<AttendVO> arrAttendVO = new ArrayList<AttendVO>();
		
		try {
			pstmt = conn.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			
			while(rs.next()) {
				AttendVO tempAttendVO = new AttendVO(
						 rs.getString("attendStuNum"),
						 rs.getString("attendCourseNum"),
						 rs.getString("attendProfNum"),
						 rs.getInt("attendanceScore"),
						 rs.getInt("midScore"),
						 rs.getInt("finScore"),
						 rs.getInt("etcScore"),
						 rs.getInt("etcScore"),
						 rs.getString("etcScore"));
				arrAttendVO.add(tempAttendVO);
			}
			
		} catch(SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null && !pstmt.isClosed())
					pstmt.close();
			}catch(SQLException e) {
				e.printStackTrace();
			}
		}
		
		return arrAttendVO;
	}
	
	public ArrayList<DescribeTableVO> getTableDescription(String tableName) {
		String sql = "select COLUMN_NAME from COLS where table_name=?";
		PreparedStatement pstmt = null;
		ArrayList<DescribeTableVO> arrDescribeTableVO = new ArrayList<DescribeTableVO>();
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, tableName.toUpperCase());
			ResultSet rs = pstmt.executeQuery();
			
			while(rs.next()) {
				System.out.println("getTableDescription");
				System.out.println(rs.getString("COLUMN_NAME"));
				DescribeTableVO tempDescribeTableVO = new DescribeTableVO(rs.getString("COLUMN_NAME"));
				arrDescribeTableVO.add(tempDescribeTableVO);
			}
	
			
		} catch(SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null && !pstmt.isClosed())
					pstmt.close();
			}catch(SQLException e) {
				e.printStackTrace();
			}
		}
		
		return arrDescribeTableVO;
	}

	public void insertStudent(String stuNum, String chargeProfNum, String stuAffDepNum, String stuName,
			   String stuSSNum, String stuAddress, int stuPhoneNum, String stuEmail, int curGrade, int curSem) {
		String sql = "insert into Student values (?,?,?,?,?,?,?,?,?,?)";
		PreparedStatement pstmt = null;

		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, stuNum);
			pstmt.setString(2, chargeProfNum);
			pstmt.setString(3, stuAffDepNum);
			pstmt.setString(4, stuName);
			pstmt.setString(5, stuSSNum);
			pstmt.setString(6, stuAddress);
			pstmt.setInt(7, stuPhoneNum);
			pstmt.setString(8, stuEmail);
			pstmt.setInt(9, curGrade);
			pstmt.setInt(10, curSem);
			pstmt.executeUpdate();
		} 
		catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null && !pstmt.isClosed())
					pstmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	
	public void insertProfessor(String profNum, String profAffDepNum, String profName, String profSSNum,
			String profAddress, int profPhoneNum, String profEmail) {
		String sql = "insert into Professor values (?,?,?,?,?,?,?)";
		PreparedStatement pstmt = null;

		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, profNum);
			pstmt.setString(2, profAffDepNum);
			pstmt.setString(3, profName);
			pstmt.setString(4, profSSNum);
			pstmt.setString(5, profAddress);
			pstmt.setInt(6, profPhoneNum);
			pstmt.setString(7, profEmail);
			pstmt.executeUpdate();
		} catch (SQLException e) {

			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null && !pstmt.isClosed())
					pstmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	
	public void insertCourse(String courseNum, String chargeProfNum, String progressDepNum, String courseName
			, float receivedCredits, int courseTime, String lecRoom) {
		String sql = "insert into Course values (?,?,?,?,?,?,?)";
		PreparedStatement pstmt = null;

		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, courseNum);
			pstmt.setString(2, chargeProfNum);
			pstmt.setString(3, progressDepNum);
			pstmt.setString(4, courseName);
			pstmt.setFloat(5, receivedCredits);
			pstmt.setInt(6, courseTime);
			pstmt.setString(7, lecRoom);
			pstmt.executeUpdate();
		} catch (SQLException e) {

			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null && !pstmt.isClosed())
					pstmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	
	public void insertDepartment(String depNum, String depName, int depPhoneNum) {
		String sql = "insert into Department values (?,?,?)";
		PreparedStatement pstmt = null;

		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, depNum);
			pstmt.setString(2, depName);
			pstmt.setInt(3, depPhoneNum);
			pstmt.executeUpdate();
		} catch (SQLException e) {

			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null && !pstmt.isClosed())
					pstmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	
	public void insertAttend(String attendStuNum, String attendCourseNum, String attendProfNum,
			int attendanceScore, int midScore, int finScore, int etcScore, int totalScore, String grade) {
		String sql = "insert into Attend values (?,?,?,?,?,?,?,?,?)";
		PreparedStatement pstmt = null;

		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, attendStuNum);
			pstmt.setString(2, attendCourseNum);
			pstmt.setString(3, attendProfNum);
			pstmt.setInt(4, attendanceScore);
			pstmt.setInt(5, midScore);
			pstmt.setInt(6, finScore);
			pstmt.setInt(7, etcScore);
			pstmt.setInt(8, totalScore);
			pstmt.setString(9, grade);
			pstmt.executeUpdate();
		} catch (SQLException e) {

			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null && !pstmt.isClosed())
					pstmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
}
